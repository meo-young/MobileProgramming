package com.example.week04.homeworkimport java.io.Fileimport java.io.FileNotFoundExceptionimport java.util.Scannerdata class Word(val word: String, val meaning: String) {    override fun toString(): String {        return "$word : $meaning"    }}fun main() {    try {        val scan = Scanner(File("client.txt"))        val list = mutableListOf<Word>()        while (scan.hasNextLine()) {            val word = scan.nextLine()            val meaning = scan.nextLine()            list.add(Word(word.trim(), meaning.trim()))        }        menu(list)    } catch (e: FileNotFoundException) {        println("파일 위치를 확인하세요.")    }}fun menu(list: MutableList<Word>) {    while (true) {        println("1) 영어단어 검색  2) 부분 영단어 검색(입력값으로 시작하는)  3) 뜻 검색  4) 종료")        print("메뉴를 선택하세요 : ")        val input = readln().toInt()        when (input) {            1 -> {                searchVoc1(list)            }            2 -> {                searchVoc2(list)            }            3 -> {                searchVoc3(list)            }            4 -> {                println("프로그램을 종료합니다.\n")                break            }        }    }}fun searchVoc3(list: MutableList<Word>) {    print("찾을 뜻을 입력하세요 (뜻의 일부만 포함) : ")    val meaning = readln().trim()    val result = list.filter { it.meaning.contains(meaning) }    if(result.isNotEmpty())        result.forEach { println(it) }    else        println("찾는 단어가 존재하지 않습니다.")}fun searchVoc2(list: MutableList<Word>) {    print("찾을 영단어의 일부를 입력하세요 : ")    val word = readln().trim()    val result = list.filter { it.word.startsWith(word) }    if(result.isNotEmpty())        result.forEach { println(it) }    else        println("찾는 단어가 존재하지 않습니다.")}fun searchVoc1(list: MutableList<Word>) {    print("찾을 영단어를 정확하게 입력하세요 : ")    val word = readln().trim()    val result = list.filter { it.word==word }    if(result.isNotEmpty())        result.forEach { println(it) }    else        println("찾는 단어가 존재하지 않습니다.")}